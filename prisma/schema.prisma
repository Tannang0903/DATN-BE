generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Gender {
  MALE
  FEMALE
}

enum RegisterStatus {
  Pending
  Approved
  Rejected
}

enum EventType {
  Internal
  External
  Hybrid
}

enum ProofType {
  Internal
  External
}

model IdentityUser {
  id             String @id(map: "pk_identity_user") @default(uuid()) @map("id") @db.Uuid
  username       String @db.VarChar(50)
  email          String @unique
  fullname       String @db.VarChar(50)
  imageUrl       String
  hashedPassword String
  refreshToken   String?  @map("refresh_token")

  student                  Student?
  eventOrganizationContact EventOrganizationContact?
  roles                    UserRole[]
  verificationTokens       VerificationToken[]
}

model IdentityRole {
  id           String   @id(map: "pk_identity_role") @default(uuid()) @map("id") @db.Uuid
  name         String   @unique @db.VarChar(50)
  description  String?  @db.VarChar(255)
  createdAt    DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt    DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  canBeUpdated Boolean  @default(true) @map("can_be_updated") @db.Boolean
  canBeDeleted Boolean  @default(true) @map("can_be_deleted") @db.Boolean

  users UserRole[]
}

model VerificationToken {
  id        String   @id(map: "pk_verification_token") @default(uuid()) @db.Uuid
  userId    String   @map("user_id") @db.Uuid
  token     String
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  expiresAt DateTime @map("expires_at") @db.Timestamptz(6)

  IdentityUser IdentityUser @relation(fields: [userId], references: [id], onDelete: Cascade, map: "fk_verification_token_user")
  @@map("VerificationToken")
}

model UserRole {
  userId String @map("user_id") @db.Uuid
  roleId String @map("role_id") @db.Uuid

  IdentityUser IdentityUser @relation(fields: [userId], references: [id], onDelete: Cascade, map: "fk_user_to_role_user")
  IdentityRole IdentityRole @relation(fields: [roleId], references: [id], onDelete: Cascade, map: "fk_user_to_role_role")

  @@id([userId, roleId])
}

model Student {
  id                 String   @id @default(uuid()) @db.Uuid
  code               String   @unique
  fullname           String   @db.VarChar(50)
  gender             Gender
  birth              DateTime
  hometown           String?  @db.VarChar(128)
  address            String?  @db.VarChar(128)
  imageUrl           String
  citizenId          String   @unique
  email              String   @unique
  phone              String   @db.VarChar(10)
  facultyId          String   @map("faculty_id") @db.Uuid
  homeRoomId         String   @map("homeroom_id") @db.Uuid
  educationProgramId String   @map("education_program_id") @db.Uuid
  identityId         String   @unique @map("identity_id") @db.Uuid

  Faculty             Faculty               @relation(fields: [facultyId], references: [id])          
  HomeRoom            HomeRoom               @relation(fields: [homeRoomId], references: [id])
  EducationProgram    EducationProgram       @relation(fields: [educationProgramId], references: [id])
  IdentityUsers        IdentityUser           @relation(fields: [identityId], references: [id], onDelete: Cascade)
  studentEventRegister StudentEventRegister[]
}

model Faculty {
  id   String @id @default(uuid()) @db.Uuid
  name String @unique

  homeRooms HomeRoom[]
  students  Student[]
}

model HomeRoom {
  id        String @id @default(uuid()) @db.Uuid
  name      String @unique
  facultyId String @map("faculty_id") @db.Uuid

  faculty   Faculty   @relation(fields: [facultyId], references: [id])
  students  Student[]
}

model EducationProgram {
  id                    String @id @default(uuid()) @db.Uuid
  name                  String @unique
  requiredActivityScore Int    @db.Integer
  requiredCredit        Int    @db.Integer

  students Student[]
}

model EventActivity {
  id              String  @id @default(uuid()) @db.Uuid
  name            String  @db.VarChar(50)
  minScore        Int     @db.Integer
  maxScore        Int     @db.Integer
  eventCategoryId String? @map("event_category_id") @db.Uuid

  EventCategory EventCategory?  @relation(fields: [eventCategoryId], references: [id])
  Events        Event[]
  RequestEvent  RequestEvent[]
  ExternalProof ExternalProof[]
}

model EventCategory {
  id   String @id @default(uuid()) @db.Uuid
  name String @db.VarChar(128)

  Activities EventActivity[]
}

model EventAttendanceInfo {
  id      String   @id @default(uuid()) @db.Uuid
  code    String   @unique
  startAt DateTime @default(now()) @map("start_at") @db.Timestamptz(6)
  endAt   DateTime @default(now()) @map("end_at") @db.Timestamptz(6)
  eventId String   @map("event_id") @db.Uuid

  Event           Event             @relation(fields: [eventId], references: [id])
  EventAttendance EventAttendance[]
}

model EventRegistrationInfo {
  id      String   @id @default(uuid()) @db.Uuid
  startAt DateTime @default(now()) @map("start_at") @db.Timestamptz(6)
  endAt   DateTime @default(now()) @map("end_at") @db.Timestamptz(6)
  eventId String   @map("event_id") @db.Uuid

  Event Event @relation(fields: [eventId], references: [id])
}

model Event {
  id              String         @id @default(uuid()) @db.Uuid
  name            String         @db.VarChar(50)
  introduction    String         @db.VarChar(128)
  description     String         @db.VarChar(250)
  imageUrl        String
  startAt         DateTime       @default(now()) @map("start_at") @db.Timestamptz(6)
  endAt           DateTime       @default(now()) @map("end_at") @db.Timestamptz(6)
  type            EventType
  fullAddress     String         @db.VarChar(128)
  longtitude      Int            @db.Integer()
  latitude        Int            @db.Integer()
  EventActivities EventActivity? @relation(fields: [eventActivityId], references: [id])
  eventActivityId String?        @map("event_activity_id") @db.Uuid

  EventAttendanceInfos   EventAttendanceInfo[]
  EventRegistrationInfos EventRegistrationInfo[]
  EventRoles             EventRole[]
  OrganizationInEvent    OrganizationInEvent[]
  InternalProof          InternalProof[]
}

model EventRole {
  id            String  @id @default(uuid()) @db.Uuid
  name          String  @db.VarChar(50)
  description   String  @db.VarChar(250)
  score         Int     @db.Integer()
  quantity      Int     @db.Integer()
  isNeedApprove Boolean @db.Boolean()
  eventId       String  @map("event_id") @db.Uuid

  Event                 Event                  @relation(fields: [eventId], references: [id])
  StudentEventRegisters StudentEventRegister[]
  InternalProof         InternalProof[]
}

model StudentEventRegister {
  id           String         @id @default(uuid()) @db.Uuid
  description  String         @db.VarChar(250)
  status       RegisterStatus
  registeredAt DateTime       @default(now()) @map("register_at") @db.Timestamptz(6)
  updatedAt    DateTime       @default(now()) @map("update_at") @db.Timestamptz(6)
  updatedBy    String
  rejectReason String?        @db.VarChar(250)
  studentId    String         @map("student_id") @db.Uuid
  eventRoleId  String         @map("event_role_id") @db.Uuid

  Student         Student           @relation(fields: [studentId], references: [id])
  EventRole       EventRole         @relation(fields: [eventRoleId], references: [id])
  EventAttendance EventAttendance[]
}

model EventAttendance {
  id                     String    @id @default(uuid()) @db.Uuid
  eventAttendanceInfoId  String    @map("event_attendance_info_id") @db.Uuid
  studentEventRegisterId String    @map("student_event_register_id") @db.Uuid
  attendanceAt           DateTime? @default(now()) @map("attendance_at") @db.Timestamptz(6)

  EventAttendanceInfo  EventAttendanceInfo  @relation(fields: [eventAttendanceInfoId], references: [id])
  StudentEventRegister StudentEventRegister @relation(fields: [studentEventRegisterId], references: [id])
}

model OrganizationInEvent {
  id             String @id @default(uuid()) @db.Uuid
  eventId        String @map("event_id") @db.Uuid
  organizationId String @map("organization_id") @db.Uuid
  role           String @db.VarChar(250)

  Event                  Event                    @relation(fields: [eventId], references: [id])
  EventOrganization      EventOrganization        @relation(fields: [organizationId], references: [id])
  OrganizationRepInEvent OrganizationRepInEvent[]
}

model OrganizationRepInEvent {
  organizationInEventId String @map("organization_in_event_id") @db.Uuid
  organizationContactId String @map("organization_contact_id") @db.Uuid
  role                  String @db.VarChar(250)

  OrganizationInEvent      OrganizationInEvent      @relation(fields: [organizationInEventId], references: [id])
  EventOrganizationContact EventOrganizationContact @relation(fields: [organizationContactId], references: [id])

  @@id([organizationInEventId, organizationContactId])
}

model EventOrganization {
  id          String  @id @default(uuid()) @db.Uuid
  name        String  @db.VarChar(50)
  description String? @db.VarChar(250)
  email       String  @unique
  phone       String  @db.VarChar(10)
  address     String? @db.VarChar(128)
  imageUrl    String

  OrganizationInEvent      OrganizationInEvent[]
  EventOrganizationContact EventOrganizationContact[]
}

model EventOrganizationContact {
  id          String    @id @default(uuid()) @db.Uuid
  name        String    @db.VarChar(50)
  gender      Gender
  birth       DateTime?
  email       String    @unique
  phone       String    @db.VarChar(10)
  address     String?   @db.VarChar(128)
  imageUrl    String
  position    String?
  organizerId String    @map("organizer_id") @db.Uuid
  userId      String    @unique @map("identity_id") @db.Uuid

  EventOrganization      EventOrganization        @relation(fields: [organizerId], references: [id])
  IdentityUser           IdentityUser             @relation(fields: [userId], references: [id])
  OrganizationRepInEvent OrganizationRepInEvent[]
}

model RequestEvent {
  id                        String    @id @default(uuid()) @db.Uuid
  name                      String    @db.VarChar(50)
  introduction              String?   @db.VarChar(128)
  description               String    @db.VarChar(250)
  capacity                  Int       @db.Integer
  imageUrl                  String
  startAt                   DateTime  @default(now()) @map("start_at") @db.Timestamptz(6)
  endAt                     DateTime  @default(now()) @map("end_at") @db.Timestamptz(6)
  type                      EventType
  fullAddress               String    @db.VarChar(250)
  longtitude                Int       @db.Integer
  latitude                  Int       @db.Integer
  organizationName          String
  organizationDescription   String?
  organizationEmail         String
  organizationPhone         String
  organizationAddress       String?
  organizationContactName   String
  organizationContactGender Gender
  organizationContactBirth  DateTime?
  organizationContactEmail  String
  organizationContactPhone  String
  eventActivityId           String?   @map("event_activity_id") @db.Uuid

  EventActivity EventActivity? @relation(fields: [eventActivityId], references: [id])
}

model Invitation {
  code        String     @id
  referenceId String?
  type        ProofType?
}

model Proof {
  id           String     @id @default(uuid()) @db.Uuid
  description  String?    @db.VarChar(250)
  type         ProofType?
  imageUrl     String?
  attendanceAt DateTime?  @default(now()) @map("attendance_at") @db.Timestamptz(6)
}

model ExternalProof {
  id         String   @id @db.Uuid
  eventName  String
  address    String
  startAt    DateTime @default(now()) @map("start_at") @db.Timestamptz(6)
  endAt      DateTime @default(now()) @map("end_at") @db.Timestamptz(6)
  activityId String   @map("activity_id") @db.Uuid
  role       String
  score      Float

  EventActivity EventActivity @relation(fields: [activityId], references: [id])
}

model InternalProof {
  id      String @id @db.Uuid
  eventId String @map("event_id") @db.Uuid
  roleId  String @map("role_id") @db.Uuid

  Event     Event     @relation(fields: [eventId], references: [id])
  EventRole EventRole @relation(fields: [roleId], references: [id])
}
