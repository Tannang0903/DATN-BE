generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Gender {
  MALE
  FEMALE
}

enum RegisterStatus {
  Pending
  Approved
  Rejected
}

enum EventType {
  Internal
  External
  Hybrid
}

enum ProofType {
  Internal
  External
}

enum EventCategoryType {
  Event
  Individual
}

enum EventStatus {
  Approved
  Cancelled
  Done
  Expired
  Happening
  Pending
  Rejected
  Registration
  Attendance
  Upcoming
  ClosedRegistration
}

model UserRole {
  userId String @map("user_id") @db.Uuid
  roleId String @map("role_id") @db.Uuid

  identityUser IdentityUser @relation(fields: [userId], references: [id], onDelete: Cascade, map: "fk_user_to_role_user")
  identityRole IdentityRole @relation(fields: [roleId], references: [id], onDelete: Cascade, map: "fk_user_to_role_role")

  @@id([userId, roleId])
}

model IdentityUser {
  id             String  @id(map: "pk_identity_user") @default(uuid()) @map("id") @db.Uuid
  username       String  @db.VarChar(64)
  email          String  @unique
  fullname       String  @db.VarChar(64)
  imageUrl       String
  hashedPassword String
  refreshToken   String? @map("refresh_token")

  student                  Student?
  eventOrganization        EventOrganization?
  eventOrganizationContact EventOrganizationContact?
  createdEvent             Event[]
  roles                    UserRole[]
  verificationTokens       VerificationToken[]
}

model IdentityRole {
  id           String   @id(map: "pk_identity_role") @default(uuid()) @map("id") @db.Uuid
  name         String   @unique @db.VarChar(64)
  description  String?  @db.VarChar(255)
  createdAt    DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt    DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  canBeUpdated Boolean  @default(true) @map("can_be_updated") @db.Boolean
  canBeDeleted Boolean  @default(true) @map("can_be_deleted") @db.Boolean

  users UserRole[]
}

model VerificationToken {
  id        String   @id(map: "pk_verification_token") @default(uuid()) @db.Uuid
  userId    String   @map("user_id") @db.Uuid
  token     String
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  expiresAt DateTime @map("expires_at") @db.Timestamptz(6)

  identityUser IdentityUser @relation(fields: [userId], references: [id], onDelete: Cascade, map: "fk_verification_token_user")

  @@map("VerificationToken")
}

model Student {
  id                 String   @id @default(uuid()) @db.Uuid
  code               String   @unique
  fullname           String   @db.VarChar(64)
  gender             Gender
  birth              DateTime
  hometown           String?  @db.VarChar(256)
  address            String?  @db.VarChar(256)
  imageUrl           String
  citizenId          String   @unique @db.VarChar(20)
  email              String   @unique
  phone              String   @db.VarChar(10)
  facultyId          String   @map("faculty_id") @db.Uuid
  homeRoomId         String   @map("homeroom_id") @db.Uuid
  educationProgramId String   @map("education_program_id") @db.Uuid
  identityId         String   @unique @map("identity_id") @db.Uuid

  faculty              Faculty               @relation(fields: [facultyId], references: [id])
  homeRoom             HomeRoom              @relation(fields: [homeRoomId], references: [id])
  educationProgram     EducationProgram      @relation(fields: [educationProgramId], references: [id])
  identityUser         IdentityUser          @relation(fields: [identityId], references: [id], onDelete: Cascade)
  studentEventRegister StudentEventRegister?
}

model Faculty {
  id   String @id @default(uuid()) @db.Uuid
  name String @unique

  homeRooms HomeRoom[]
  students  Student[]
}

model HomeRoom {
  id        String @id @default(uuid()) @db.Uuid
  name      String @unique
  facultyId String @map("faculty_id") @db.Uuid

  faculty  Faculty   @relation(fields: [facultyId], references: [id])
  students Student[]
}

model EducationProgram {
  id                    String @id @default(uuid()) @db.Uuid
  name                  String @unique
  requiredActivityScore Int    @db.Integer
  requiredCredit        Int    @db.Integer

  students Student[]
}

model EventCategory {
  id   String            @id @default(uuid()) @db.Uuid
  name String            @db.Text
  type EventCategoryType

  eventActivities EventActivity[]
}

model EventActivity {
  id              String  @id @default(uuid()) @db.Uuid
  name            String  @db.Text
  minScore        Int     @db.Integer
  maxScore        Int     @db.Integer
  eventCategoryId String? @map("event_category_id") @db.Uuid

  eventCategory  EventCategory?  @relation(fields: [eventCategoryId], references: [id] )
  events         Event[]
  externalProofs ExternalProof[]
  specialProofs  SpecialProof[]
  
}

model EventAttendanceInfo {
  id      String   @id @default(uuid()) @db.Uuid
  code    String?  @unique
  startAt DateTime @default(now()) @map("start_at") @db.Timestamptz(6)
  endAt   DateTime @default(now()) @map("end_at") @db.Timestamptz(6)
  eventId String   @map("event_id") @db.Uuid

  event            Event             @relation(fields: [eventId], references: [id], onDelete: Cascade)
 
  eventsAttendance StudentEventAttendance[]
}

model EventRegistrationInfo {
  id      String   @id @default(uuid()) @db.Uuid
  startAt DateTime @default(now()) @map("start_at") @db.Timestamptz(6)
  endAt   DateTime @default(now()) @map("end_at") @db.Timestamptz(6)
  eventId String   @map("event_id") @db.Uuid

  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)
}

model Event {
  id                           String      @id @default(uuid()) @db.Uuid
  name                         String      @db.Text
  introduction                 String      @db.Text
  description                  String      @db.Text
  imageUrl                     String
  startAt                      DateTime    @default(now()) @map("start_at") @db.Timestamptz(6)
  endAt                        DateTime    @default(now()) @map("end_at") @db.Timestamptz(6)
  type                         EventType
  fullAddress                  String      @db.Text
  longitude                    Int         @db.Integer()
  latitude                     Int         @db.Integer()
  eventActivityId              String?     @map("event_activity_id") @db.Uuid
  status                       EventStatus
  createdAt                    DateTime    @default(now()) @map("created_at") @db.Timestamptz(6)
  createdBy                    String?     @db.Uuid
  organizationRepresentativeId String?     @unique @db.Uuid

  eventAttendanceInfos   EventAttendanceInfo[]
  eventRegistrationInfos EventRegistrationInfo[]
  eventRoles             EventRole[]
  organizationsInEvent   OrganizationInEvent[]   @relation("event_organizations")

  eventActivity              EventActivity?       @relation(fields: [eventActivityId], references: [id])
  organizationRepresentative OrganizationInEvent? @relation(fields: [organizationRepresentativeId], references: [id], "event_organizations_representative")
  identityUser               IdentityUser?        @relation(fields: [createdBy], references: [id])

  internalProofs InternalProof[]
}

model EventRole {
  id            String  @id @default(uuid()) @db.Uuid
  name          String  @db.Text
  description   String  @db.Text
  score         Int     @db.Integer()
  quantity      Int     @db.Integer()
  isNeedApprove Boolean @db.Boolean()
  eventId       String  @map("event_id") @db.Uuid

  event                 Event                  @relation(fields: [eventId], references: [id], onDelete: Cascade)
  studentsEventRegister StudentEventRegister[]
  internalProofs        InternalProof[]
}

model OrganizationInEvent {
  id             String @id @default(uuid()) @db.Uuid
  eventId        String @map("event_id") @db.Uuid
  organizationId String @map("organization_id") @db.Uuid
  role           String @db.Text

  event               Event             @relation("event_organizations", fields: [eventId], references: [id], onDelete: Cascade)
  eventOrganization   EventOrganization @relation(fields: [organizationId], references: [id])
  eventRepresentative Event?            @relation("event_organizations_representative")

  organizationRepresentativesInEvent OrganizationRepresentativeInEvent[]
  @@unique([eventId, organizationId])
}

model OrganizationRepresentativeInEvent {
  organizationInEventId String @map("organization_in_event_id") @db.Uuid
  organizationContactId String @map("organization_contact_id") @db.Uuid
  role                  String @db.Text

  organizationInEvent      OrganizationInEvent      @relation(fields: [organizationInEventId], references: [id], onDelete: Cascade)
  eventOrganizationContact EventOrganizationContact @relation(fields: [organizationContactId], references: [id])

  @@id([organizationInEventId, organizationContactId])
}

model StudentEventAttendance {
  id                     String    @id @default(uuid()) @db.Uuid
  eventAttendanceInfoId  String    @map("event_attendance_info_id") @db.Uuid
  studentEventRegisterId String    @map("student_event_register_id") @db.Uuid @unique
  attendanceAt           DateTime? @default(now()) @map("attendance_at") @db.Timestamptz(6)

  eventAttendanceInfo  EventAttendanceInfo  @relation(fields: [eventAttendanceInfoId], references: [id])
  studentEventRegister StudentEventRegister @relation(fields: [studentEventRegisterId], references: [id])
}

model StudentEventRegister {
  id           String         @id @default(uuid()) @db.Uuid
  description  String         @db.Text
  rejectReason String?        @db.Text
  status       RegisterStatus
  studentId    String         @map("student_id") @db.Uuid @unique 
  eventRoleId  String         @map("event_role_id") @db.Uuid
  createdAt    DateTime       @default(now()) @map("created_at") @db.Timestamptz(6)
  creaetdBy    String         @db.Uuid @map("created_by")
  updatedAt    DateTime       @default(now()) @map("updated_at") @db.Timestamptz(6)
  updatedBy    String         @db.Uuid @map("updated_by")

  student   Student   @relation(fields: [studentId], references: [id])
  eventRole EventRole @relation(fields: [eventRoleId], references: [id])

  studentEventAttendance StudentEventAttendance?
}

model EventOrganization {
  id          String   @id @default(uuid()) @db.Uuid
  name        String   @db.VarChar(50)
  description String?  @db.VarChar(250)
  email       String?  @unique
  phone       String   @db.VarChar(10)
  address     String?  @db.VarChar(128)
  imageUrl    String
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime @default(now()) @map("updated_at") @db.Timestamptz(6)
  identityId  String   @unique @map("identity_id") @db.Uuid

  identityUser IdentityUser @relation(fields: [identityId], references: [id], onDelete: Cascade)

  organizationsInEvent      OrganizationInEvent[]
  eventOrganizationContacts EventOrganizationContact[]
}

model EventOrganizationContact {
  id                  String    @id @default(uuid()) @db.Uuid
  name                String    @db.VarChar(50)
  gender              Gender
  birth               DateTime?
  email               String?   @unique
  phone               String    @db.VarChar(10)
  address             String?   @db.VarChar(128)
  imageUrl            String
  position            String?
  eventOrganizationId String    @map("organization_id") @db.Uuid
  identityId          String    @unique @map("identity_id") @db.Uuid

  eventOrganization EventOrganization @relation(fields: [eventOrganizationId], references: [id])
  identityUser      IdentityUser      @relation(fields: [identityId], references: [id], onDelete: Cascade)

  organizationRepresentativesInEvent OrganizationRepresentativeInEvent[]
}

  model Proof {
  id           String     @id @default(uuid()) @db.Uuid
  proofType      ProofType     
  proofStatus    Int      
  description    String?   @db.VarChar(250) 
  imageUrl       String?   
  attendanceAt   DateTime? @map("attendance_at")  @db.Timestamptz(6)
  studentId      String   
  createdAt      DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  createdBy      String?  @map("created_by")
}

model InternalProof {
  id      String @id @db.Uuid
  eventId String @map("event_id") @db.Uuid
  roleId  String @map("role_id") @db.Uuid

  event     Event     @relation(fields: [eventId], references: [id])
  eventRole EventRole @relation(fields: [roleId], references: [id])
}

model ExternalProof {
  id         String   @id @db.Uuid
  eventName  String   @db.Text
  address    String   @db.Text
  startAt    DateTime @default(now()) @map("start_at") @db.Timestamptz(6)
  endAt      DateTime @default(now()) @map("end_at") @db.Timestamptz(6)
  activityId String   @map("activity_id") @db.Uuid
  role       String   @db.Text
  score      Float
  organizationName String

  eventActivity EventActivity @relation(fields: [activityId], references: [id])
}

model SpecialProof  {
  id         String   @id @db.Uuid
  title      String   @db.Text
  role       String   @db.Text
  startAt    DateTime @default(now()) @map("start_at") @db.Timestamptz(6)
  endAt      DateTime @default(now()) @map("end_at") @db.Timestamptz(6)
  activityId String   @map("activity_id") @db.Uuid
  score      Float

  eventActivity EventActivity @relation(fields: [activityId], references: [id])
}


